{"version":3,"file":"component---src-pages-index-js-f62cc31362e7be128050.js","mappings":"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","sources":["webpack://gum-test/./src/images/img10-f.png","webpack://gum-test/./src/images/test.png","webpack://gum-test/./src/pages/index.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/img10-f-651f5d532c0dcd9c7764a17e17895bcd.png\";","export default __webpack_public_path__ + \"static/test-f8a27158c0bc147a46bd66e7f35c1a3a.png\";","import React, { useEffect, useRef, useState, useCallback } from \"react\"\n\nimport './styles.scss'\nimport testImage from '../images/test.png'\nimport frameImage from '../images/img10-f.png'\n\nconst FRAME_HEIGHT = 640\nconst FRAME_WIDTH = 480\nconst frameAspect = FRAME_HEIGHT / FRAME_WIDTH\n\nconst IndexPage = () => {\n  const video = useRef()\n  const canvas = useRef()\n\n  const [shouldFacingUser, setShouldFacingUser] = useState(false)\n\n  const takePhoto = useCallback(() => {\n    video.current.pause()\n\n    const videoStyle = window.getComputedStyle(video.current)\n    const videoViewWidth = parseFloat(videoStyle.width)\n    const videoViewHeight = parseFloat(videoStyle.height)\n\n    const { videoWidth, videoHeight } = video.current\n\n    const videoAspect = (videoHeight / videoWidth)\n    const videoViewAspect = (videoViewHeight / videoViewWidth)\n\n    const [frameViewWidth, frameViewHeight] = (videoViewAspect > frameAspect)\n      ? [videoViewWidth, videoViewWidth * frameAspect]\n      : [videoViewHeight / frameAspect, videoViewHeight]\n\n    const videoRatio = (videoAspect > videoViewAspect)\n      ? (videoWidth / videoViewWidth)\n      : (videoHeight / videoViewHeight)\n\n    const w = frameViewWidth * videoRatio\n    const h = frameViewHeight * videoRatio\n    const x = (videoWidth - w) / 2\n    const y = (videoHeight - h) / 2\n\n    const context = canvas.current.getContext('2d')\n    if (shouldFacingUser) {\n      context.translate(FRAME_WIDTH, 0)\n      context.scale(-1, 1)\n    }\n    context.drawImage(video.current, x, y, w, h, 0, 0, FRAME_WIDTH, FRAME_HEIGHT)\n\n    canvas.current.toBlob(blob => {\n      console.log(`takePhoto blob`, blob)\n      video.current.play()\n    })\n  }, [shouldFacingUser])\n\n  const switchFacing = useCallback(() => {\n    video.current.srcObject?.getTracks()?.forEach(track => track.stop())\n    setShouldFacingUser(!shouldFacingUser)\n  }, [shouldFacingUser])\n\n  useEffect(() => {\n    const touchmove = e => {\n      e.preventDefault()\n    }\n    document.addEventListener('touchmove', touchmove, { passive: false })\n    return document.removeEventListener('touchmove', touchmove)\n  }, [])\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: shouldFacingUser ? 'user' : 'environment'\n      },\n      audio: false,\n    })\n      .then(stream => {\n        video.current.srcObject = stream\n      })\n      .catch(err => {\n        console.error(err)\n      })\n  }, [shouldFacingUser])\n\n  return (\n    <div>\n      <video\n        ref={ref => video.current = ref}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          display: 'block',\n          objectFit: 'cover',\n          transform: shouldFacingUser && 'scaleX(-1)'\n        }}\n        autoPlay\n        playsInline\n        muted\n        // width={IMAGE_WIDTH}\n        // height={IMAGE_HEIGHT}\n        // onLoadedMetadata={() => {\n        //   console.log(`*** height=${video.current.videoHeight} width=${video.current.videoWidth}`)\n        // }}\n      />\n      <canvas\n        ref={ref => canvas.current = ref}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          display: 'block',\n          objectFit: 'contain'\n        }}\n        width={FRAME_WIDTH}\n        height={FRAME_HEIGHT}\n      />\n      <img\n        src={frameImage}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          display: 'block',\n          objectFit: 'contain'\n        }}\n        alt=\"Frame image\"\n      />\n      <div style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n      }}>\n        <div style={{\n          height: 80,\n          display: 'flex',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          padding: 20\n        }}>\n          <button onClick={switchFacing}>\n            SWITCH FACING\n          </button>\n        </div>\n        <div style={{\n          height: 120,\n          display: 'flex',\n          alignItems: 'center',\n          padding: 20\n        }}>\n          <div style={{ flex: 1 }}>\n          </div>\n          <div>\n            <button onClick={takePhoto}>\n              SHOOT\n            </button>\n          </div>\n          <div style={{ flex: 1 }}>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default IndexPage\n"],"names":["FRAME_WIDTH","frameAspect","video","useRef","canvas","useState","shouldFacingUser","setShouldFacingUser","takePhoto","useCallback","current","pause","videoStyle","window","getComputedStyle","videoViewWidth","parseFloat","width","videoViewHeight","height","videoWidth","videoHeight","videoViewAspect","videoRatio","w","h","x","y","context","getContext","translate","scale","drawImage","toBlob","blob","console","log","play","switchFacing","srcObject","getTracks","forEach","track","stop","useEffect","touchmove","e","preventDefault","document","addEventListener","passive","removeEventListener","navigator","mediaDevices","getUserMedia","facingMode","audio","then","stream","catch","err","error","ref","style","position","top","left","display","objectFit","transform","autoPlay","playsInline","muted","src","frameImage","alt","right","bottom","flexDirection","justifyContent","alignItems","padding","onClick","flex"],"sourceRoot":""}